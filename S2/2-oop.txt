Keywords

Public

- The public keyword allows variables to be used inside of several classes and files without ann issue in ts. 
- This is important due to modules since they are run when the file is required.
- This is the default value of a variable.

Private

- Private makes the variables unchangeable outside of a class.
- Most of the time this is used ot protect important information that you dont want to be overwritten.
- Use getters and setters to access variables.

Protected

- Private values are not available to classes that extend the original class.
- Protected values are availible to extended classes, everything else is the same as private

ReadOnly

- As the name implies this throws an error if you try to change the value of a variable.
- You can use this in classes since you cant use consts

Static 

- Static makes values and methods available without needed to initialixe the class first.
- We have alreadry been using this, a good example is Math.PI or Math.min(), we dont need to make let math = new Math()

Classes

- Fancy objects

Abstract

- Abstract makes classes, methods, or variables only accessible to extended classes
- If you extend something you must include super()

Getters and setters

- These are very comon methods in classes that allow you change values in the class that are otherwise protected.
- Normally there is some kind of validation that you are allowed to change that value but it doesnt need to have that.
- To create then use the get/set keywords
- If there are parameters, then it is a set. Otherwize it is a get. This is how they are allowed to use the same name

Interface

- AN interface is a description of an object, including values and methods. 
- They are very similar to types but work better with classes in particular.
- Interfaces are always capitalized
- THis is a great way to ve sure that an object is guaranteed to have a method or and what that method is going to return.
- This avoids errors in large projects where an object may be user over several files, ensuring that they have the required values and methods.
- Interfaces were created to help with classes not so much with functions

Intersection types

- Intersection types can take 2 types or interfaces and combine them into 1 type
- This is useful fo some more advanced functions

Type Guards

- Type Guards are when you yse a conditional to choose only 1 type and make sure the input will be that type
- if (typeof input1 === "number"){
    result = input1 + input2;
}

Type casting

- Type Casting is a useful tool where we specifically say what the type is without any assumptions or implications
- You can do this in 2 different ways using eaither <args> or the as keyword

Generics

- A generic is a placeholder type that is used as a catch all for types you dont know yet.
- The most common use for these are objects with unknown fields or variables fields.
- Typically we reserve these with letters starting with T and then moving through the alphabet.
- These also dont play well with arrow functions so it is better to use funciton declarations instead

- function merge<T extends object, U extends object>(objA: T, objB: U) {
  return Object.assign(objA, objB);
}

Angular

- TS is required for angular.
- Angular creates sthe content on the page by using decorators.

Decorators

- These are function that are applied to code to make it easier to use and understand, most commonly used for devs.
- Helps to make sure classes and methods are used correctly
- Decorators requiere a certain number of arguments in the parameters based on what it is being used on, we will go over there together later
- Decorators are used when teh js defines the class, not when it is initialized
- Where you place a decorator changes what values you need to include in the parameters and what is returned by the decorator funcrions.
- These can be used to return a console log or something more descriptive, like a function or property
- Decorators are special funcitons os they are creadted the same as any other function.
- They are  used by adding the @ ssign to soething you want to decorate.
- Lastly they are new, so we need to enable them in the tsconfig.json file 
- function Logger(logstring: string){
  console.log(logstring)
}
@Logger('LOGGING')

Decorator Factories

- You have the option to create functions that return functionns, this allows you to create variables decorators that return the same way but with different values.

Decorator Templates

- Templates are typically used to create an output in the HTML using a defined class
- These are also able to instanciate classes on their own to return a value










